{"version":3,"sources":["Components/User.jsx","Components/Comment.jsx","Components/CommentList.jsx","Components/Post.jsx","Components/PostList.jsx","App.jsx","serviceWorker.js","index.js"],"names":["User","react_default","a","createElement","key","this","props","user","id","className","name","email","username","Component","Comment","href","comments","body","CommentList","Comment_Comment","Post","post","users","title","User_User","CommentList_CommentList","PostList","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","state","items","getItem","bind","assertThisInitialized","sortTitle","url","fetch","then","response","json","_this2","Promise","all","getUrl","_ref","_ref2","slicedToArray","posts","setState","map","item","objectSpread","find","userId","com","postId","prevState","sort","b","localeCompare","onClick","Post_Post","App","PostList_PostList","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.cbc3fca8.chunk.js","sourcesContent":["import React, { Component } from 'react'\r\n\r\nexport default class User extends Component {\r\n  render() {\r\n    return (\r\n      <div key={this.props.user.id} className=\"user-list\">\r\n        <span>Name: {this.props.user.name}</span>\r\n        <span>Email: {this.props.user.email}</span>\r\n        <span>UserName: {this.props.user.username}</span>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n","import React, { Component } from 'react'\r\n\r\nexport default class Comment extends Component {\r\n  render() {\r\n    return (\r\n      <div key={this.props.id}>\r\n        <div className=\"comments\">\r\n          <a href={this.props.comments.email}>\r\n            {this.props.comments.name}\r\n          </a>\r\n          <span>{this.props.comments.body}</span>\r\n        </div>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n","import React, { Component } from 'react'\r\nimport Comment from './Comment.jsx';\r\n\r\nexport default class CommentList extends Component {\r\n  render() {\r\n    return (\r\n      <Comment comments={this.props.comments}/>\r\n    )\r\n  }\r\n}\r\n","import React, { Component } from 'react'\r\nimport User from './User.jsx';\r\nimport CommentList from './CommentList.jsx';\r\n\r\nexport default class Post extends Component {\r\n  render() {\r\n    const user = this.props.post.users;\r\n    const comments = this.props.post.comments;\r\n    return (\r\n      <div key={this.props.post.id} className=\"post-list\">\r\n        <h3><span className=\"post--dec\">Post: </span>{this.props.post.title}</h3>\r\n        <p><span className=\"post--dec\">Body: </span> {this.props.post.body}</p>\r\n        <User user={user}/>\r\n        <CommentList comments={comments}/>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n","import React, { Component } from 'react';\r\nimport Post from './Post.jsx';\r\n\r\nexport default class PostList extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      items: []\r\n    }\r\n    this.getItem = this.getItem.bind(this);\r\n    this.sortTitle = this.sortTitle.bind(this);\r\n  }\r\n\r\n  getUrl(url) {\r\n    return fetch(url)\r\n    .then(response => response.json()).then(response => response)\r\n  }\r\n\r\n  getItem() {\r\n    Promise.all([\r\n      this.getUrl('https://jsonplaceholder.typicode.com/posts'),\r\n      this.getUrl('https://jsonplaceholder.typicode.com/users'),\r\n      this.getUrl('https://jsonplaceholder.typicode.com/comments')])\r\n    .then(([posts, users, comments]) => this.setState({\r\n      items: posts.map(item => ({\r\n        ...item,\r\n        users: users.find(user => user.id === item.userId),\r\n        comments: comments.find(com => com.postId === item.userId)\r\n      }))\r\n    }));\r\n  };\r\n\r\n  sortTitle() {\r\n    this.setState(prevState => ({\r\n      items: prevState.items.sort((a, b) => a.title.localeCompare(b.title))\r\n    }))\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"post\">\r\n        <button onClick={this.getItem}>Load Content</button>\r\n        <button onClick={this.sortTitle}>Changed title</button>\r\n        {this.state.items.map(post =>\r\n        <Post post={post} key={post.id}/>\r\n        )}\r\n      </div>\r\n    )\r\n  }\r\n}\r\n","import React from 'react';\nimport './App.css';\nimport PostList from './Components/PostList.jsx';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <PostList />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App.jsx';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}